/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ERC721EscrowSaleInterface extends ethers.utils.Interface {
  functions: {
    "FEE_DENOMINATOR()": FunctionFragment;
    "allowNFTs(address[])": FunctionFragment;
    "buy(address,uint256)": FunctionFragment;
    "cancel(address,uint256)": FunctionFragment;
    "fee()": FunctionFragment;
    "ntfAllowed(address)": FunctionFragment;
    "onSale(address,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sales(address,uint256)": FunctionFragment;
    "setFee(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "allowNFTs", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "ntfAllowed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "onSale",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sales",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowNFTs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ntfAllowed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onSale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sales", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "FeeSet(uint256,uint256)": EventFragment;
    "ItemCancelled(address,address,uint256)": EventFragment;
    "ItemOnSale(address,address,uint256,uint256)": EventFragment;
    "ItemSold(address,address,uint256,uint256,uint256)": EventFragment;
    "NFTTokensAllowed(address[])": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemOnSale"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ItemSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTTokensAllowed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class ERC721EscrowSale extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ERC721EscrowSaleInterface;

  functions: {
    FEE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "FEE_DENOMINATOR()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    allowNFTs(
      nftTokens: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "allowNFTs(address[])"(
      nftTokens: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    buy(
      nftToken: string,
      nftId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "buy(address,uint256)"(
      nftToken: string,
      nftId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    cancel(
      nftToken: string,
      nftId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancel(address,uint256)"(
      nftToken: string,
      nftId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    fee(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "fee()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    ntfAllowed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "ntfAllowed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    onSale(
      nftToken: string,
      nftId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "onSale(address,uint256,uint256)"(
      nftToken: string,
      nftId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    paused(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "paused()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    sales(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      tokenId: BigNumber;
      price: BigNumber;
      soldTo: string;
      onSale: boolean;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: boolean;
    }>;

    "sales(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      tokenId: BigNumber;
      price: BigNumber;
      soldTo: string;
      onSale: boolean;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: boolean;
    }>;

    setFee(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFee(uint256)"(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  "FEE_DENOMINATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

  allowNFTs(
    nftTokens: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "allowNFTs(address[])"(
    nftTokens: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  buy(
    nftToken: string,
    nftId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "buy(address,uint256)"(
    nftToken: string,
    nftId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  cancel(
    nftToken: string,
    nftId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancel(address,uint256)"(
    nftToken: string,
    nftId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  "fee()"(overrides?: CallOverrides): Promise<BigNumber>;

  ntfAllowed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "ntfAllowed(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  onSale(
    nftToken: string,
    nftId: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "onSale(address,uint256,uint256)"(
    nftToken: string,
    nftId: BigNumberish,
    price: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  sales(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    owner: string;
    tokenId: BigNumber;
    price: BigNumber;
    soldTo: string;
    onSale: boolean;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: string;
    4: boolean;
  }>;

  "sales(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    owner: string;
    tokenId: BigNumber;
    price: BigNumber;
    soldTo: string;
    onSale: boolean;
    0: string;
    1: BigNumber;
    2: BigNumber;
    3: string;
    4: boolean;
  }>;

  setFee(
    newFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFee(uint256)"(
    newFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "FEE_DENOMINATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowNFTs(nftTokens: string[], overrides?: CallOverrides): Promise<void>;

    "allowNFTs(address[])"(
      nftTokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    buy(
      nftToken: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "buy(address,uint256)"(
      nftToken: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancel(
      nftToken: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancel(address,uint256)"(
      nftToken: string,
      nftId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    "fee()"(overrides?: CallOverrides): Promise<BigNumber>;

    ntfAllowed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "ntfAllowed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    onSale(
      nftToken: string,
      nftId: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "onSale(address,uint256,uint256)"(
      nftToken: string,
      nftId: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    sales(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      tokenId: BigNumber;
      price: BigNumber;
      soldTo: string;
      onSale: boolean;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: boolean;
    }>;

    "sales(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      owner: string;
      tokenId: BigNumber;
      price: BigNumber;
      soldTo: string;
      onSale: boolean;
      0: string;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: boolean;
    }>;

    setFee(newFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setFee(uint256)"(
      newFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    FeeSet(oldFee: null, newFee: null): EventFilter;

    ItemCancelled(
      account: string | null,
      nftToken: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    ItemOnSale(
      soldTo: string | null,
      nftToken: string | null,
      tokenId: BigNumberish | null,
      price: null
    ): EventFilter;

    ItemSold(
      account: string | null,
      nftToken: string | null,
      tokenId: BigNumberish | null,
      price: null,
      fee: null
    ): EventFilter;

    NFTTokensAllowed(nftTokens: string[] | null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Paused(account: null): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimateGas: {
    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "FEE_DENOMINATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowNFTs(nftTokens: string[], overrides?: Overrides): Promise<BigNumber>;

    "allowNFTs(address[])"(
      nftTokens: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    buy(
      nftToken: string,
      nftId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "buy(address,uint256)"(
      nftToken: string,
      nftId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    cancel(
      nftToken: string,
      nftId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancel(address,uint256)"(
      nftToken: string,
      nftId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    "fee()"(overrides?: CallOverrides): Promise<BigNumber>;

    ntfAllowed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "ntfAllowed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onSale(
      nftToken: string,
      nftId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "onSale(address,uint256,uint256)"(
      nftToken: string,
      nftId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    sales(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "sales(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFee(newFee: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setFee(uint256)"(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE_DENOMINATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "FEE_DENOMINATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowNFTs(
      nftTokens: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "allowNFTs(address[])"(
      nftTokens: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    buy(
      nftToken: string,
      nftId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "buy(address,uint256)"(
      nftToken: string,
      nftId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    cancel(
      nftToken: string,
      nftId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancel(address,uint256)"(
      nftToken: string,
      nftId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "fee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ntfAllowed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ntfAllowed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onSale(
      nftToken: string,
      nftId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "onSale(address,uint256,uint256)"(
      nftToken: string,
      nftId: BigNumberish,
      price: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    sales(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sales(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFee(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFee(uint256)"(
      newFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
